import * as functions from "firebase-functions";
import * as admin from "firebase-admin";
import { FieldValue } from "firebase-admin/firestore";
import * as cors from "cors";
import { OpenAI } from "openai";
import * as dotenv from "dotenv";

dotenv.config();

functions.logger.info("üîë Environment variables loaded:");
functions.logger.info("OPENAI_API_KEY present:", !!process.env.OPENAI_API_KEY);

const corsHandler = cors({ origin: true });

admin.initializeApp();

interface GenerateMessageRequest {
  conversationContext: string;
  tone?: "cheerful" | "understanding" | "direct" | "playful" | "confident" | "romantic" | "casual";
  messageType: "reply" | "opener" | "advice";
  bioInfo?: string;
  platform?: string;
  additionalContext?: string;
  screenshotUrl?: string;
}

export const decrementToken = functions.https.onRequest(async (req, res) => {
  corsHandler(req, res, async () => {
    const tokenId = req.headers.authorization?.split("Bearer ")[1];
    if (!tokenId) {
      res.status(401).send("Unauthorized");
      return;
    }

    try {
      const decodedToken = await admin.auth().verifyIdToken(tokenId);
      const uid = decodedToken.uid;
      const userRef = admin.firestore().collection("users").doc(uid);

      await admin.firestore().runTransaction(async (transaction) => {
        const userDoc = await transaction.get(userRef);
        if (!userDoc.exists) {
          throw new Error("User not found");
        }

        const newTokens = (userDoc.data()?.tokenCount || 0) - 1;
        if (newTokens < 0) {
          throw new Error("Insufficient tokens");
        }

        transaction.update(userRef, {
          tokenCount: newTokens,
          lastUsed: FieldValue.serverTimestamp()
        });
      });

      res.status(200).json({ success: true });
    } catch (error) {
      console.error("Transaction failed: ", error);
      res.status(500).send("Transaction failed");
    }
  });
});
export const generateMessage = functions.https.onCall(async (request) => {
  functions.logger.info("=== GENERATE MESSAGE FUNCTION START v3 ===");
  functions.logger.info("üì® RAW REQUEST DATA:", JSON.stringify(request.data, null, 2));

  // Check authentication - onCall provides this automatically
  if (!request.auth) {
    functions.logger.error("‚ùå No auth in request");
    throw new functions.https.HttpsError('unauthenticated', 'User must be logged in');
  }

  const uid = request.auth.uid;
  functions.logger.info('‚úÖ Authenticated user:', uid);

  const {
    conversationContext,
    tone,
    messageType,
    bioInfo,
    platform,
    additionalContext,
  }: GenerateMessageRequest = request.data;

  functions.logger.info("üîç EXTRACTED FIELDS:");
  functions.logger.info("- conversationContext:", conversationContext ? "present" : "MISSING");
  functions.logger.info("- messageType:", messageType ? "present" : "MISSING");
  functions.logger.info("- tone:", tone || "not provided");
  functions.logger.info("- bioInfo:", bioInfo || "not provided");
  functions.logger.info("- platform:", platform || "not provided");
  functions.logger.info("- additionalContext:", additionalContext || "not provided");

  if (!conversationContext || !messageType) {
    throw new functions.https.HttpsError('invalid-argument', 'Missing required fields: conversationContext and messageType');
  }

  functions.logger.info("üîç Checking user:", uid);

  functions.logger.info("üß™ Testing OpenAI API key connectivity...");
  new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
  functions.logger.info("‚úÖ OpenAI client initialized successfully");

  const userRef = admin.firestore().collection("users").doc(uid);
  const userDoc = await userRef.get();

  if (!userDoc.exists) {
    functions.logger.error("‚ùå User not found in Firestore:", uid);
    throw new functions.https.HttpsError('not-found', 'User not found');
  }

  const tokenCount = userDoc.data()?.tokenCount || 0;
  functions.logger.info("üìä User token count:", tokenCount);

  if (tokenCount <= 0) {
    functions.logger.error("‚ùå Insufficient tokens:", tokenCount);
    throw new functions.https.HttpsError('failed-precondition', 'Insufficient tokens');
  }

  functions.logger.info("‚úÖ User validation passed, proceeding to OpenAI API call");

  const systemPrompt = `◊™◊§◊ß◊ô◊ì ◊ï◊û◊ò◊®◊î:
◊ê◊™◊î ◊û◊ê◊û◊ü ◊ì◊ô◊ô◊ò◊ô◊ù ◊õ◊®◊ô◊ñ◊û◊ò◊ô ◊ï◊ë◊ò◊ï◊ó ◊ë◊¢◊¶◊û◊ï ◊ï◊¢◊ï◊ñ◊® ◊î◊ï◊ì◊¢◊ï◊™ ◊ò◊ß◊°◊ò. ◊î◊û◊ò◊®◊î ◊©◊ú◊ö ◊î◊ô◊ê ◊ú◊¢◊ñ◊ï◊® ◊ú◊û◊©◊™◊û◊©◊ô◊ù ◊ú◊ô◊¶◊ï◊® ◊™◊í◊ï◊ë◊ï◊™ ◊û◊®◊™◊ß◊ï◊™, ◊§◊ú◊®◊ò◊ò◊ô◊ï◊™ ◊ï◊ê◊ï◊™◊†◊ò◊ô◊ï◊™ ◊ë◊©◊ô◊ó◊ï◊™ ◊®◊ï◊û◊†◊ò◊ô◊ï◊™. ◊ê◊™◊î ◊û◊™◊û◊ó◊î ◊ë◊†◊ô◊™◊ï◊ó ◊©◊ô◊ó◊ï◊™ ◊ì◊ô◊ô◊ò◊ô◊ù (◊ë◊ê◊û◊¶◊¢◊ï◊™ ◊¶◊ô◊ú◊ï◊û◊ô ◊û◊°◊ö ◊ê◊ï ◊ò◊ß◊°◊ò) ◊ï◊ë◊ô◊¶◊ô◊®◊™ ◊™◊í◊ï◊ë◊ï◊™ ◊©◊î◊ü:
- ◊û◊ß◊°◊ô◊û◊ï◊™ ◊ï◊û◊®◊™◊ß◊ï◊™
- ◊ò◊ë◊¢◊ô◊ï◊™ ◊ï◊ê◊ï◊™◊†◊ò◊ô◊ï◊™ (◊ú◊ê ◊û◊™◊ï◊°◊®◊ò◊ï◊™ ◊ô◊™◊® ◊¢◊ú ◊î◊û◊ô◊ì◊î)
- ◊û◊ï◊ì◊¢◊ï◊™ ◊ú◊î◊ß◊©◊® ◊¢◊ú ◊ë◊°◊ô◊° ◊î◊ô◊°◊ò◊ï◊®◊ô◊ô◊™ ◊î◊©◊ô◊ó◊î
- ◊û◊ó◊ñ◊ß◊ï◊™ ◊ë◊ô◊ò◊ó◊ï◊ü ◊¢◊¶◊û◊ô

◊©◊ô◊ò◊ï◊™ ◊ß◊ú◊ò:
◊û◊©◊™◊û◊©◊ô◊ù ◊ô◊õ◊ï◊ú◊ô◊ù ◊ú◊°◊§◊ß ◊î◊ß◊©◊® ◊©◊ô◊ó◊î ◊ë◊©◊™◊ô ◊ì◊®◊õ◊ô◊ù:
1. ◊î◊¢◊ú◊ê◊™ ◊¶◊ô◊ú◊ï◊ù ◊û◊°◊ö - ◊ê◊™◊î ◊™◊†◊™◊ó ◊ê◊™ ◊î◊™◊û◊ï◊†◊î ◊ï◊™◊ó◊ú◊• ◊ê◊™ ◊î◊©◊ô◊ó◊î
2. ◊ß◊ú◊ò ◊ò◊ß◊°◊ò - ◊û◊©◊™◊û◊©◊ô◊ù ◊û◊ì◊ë◊ô◊ß◊ô◊ù ◊ê◊ï ◊û◊ß◊ú◊ô◊ì◊ô◊ù ◊ê◊™ ◊î◊©◊ô◊ó◊î ◊ô◊©◊ô◊®◊ï◊™

◊õ◊ê◊©◊® ◊û◊ß◊ë◊ú ◊ß◊ú◊ò ◊ò◊ß◊°◊ò:
- ◊ë◊ß◊© ◊û◊î◊û◊©◊™◊û◊© ◊ú◊°◊§◊ß ◊ê◊™ ◊î◊©◊ô◊ó◊î ◊ë◊§◊ï◊®◊û◊ò ◊ë◊®◊ï◊®
- ◊§◊ï◊®◊û◊ò ◊û◊ï◊¶◊¢: "◊î◊ù: [◊î◊ï◊ì◊¢◊î]" ◊ï"◊ê◊™◊î: [◊î◊ï◊ì◊¢◊î]" ◊ë◊©◊ï◊®◊ï◊™ ◊†◊§◊®◊ì◊ï◊™
- ◊ê◊ù ◊î◊§◊ï◊®◊û◊ò ◊ú◊ê ◊ë◊®◊ï◊®, ◊§◊®◊© ◊ú◊§◊ô ◊î◊î◊ß◊©◊® ◊ê◊ï ◊ë◊ß◊© ◊î◊ë◊î◊®◊î
- ◊ë◊ß◊© ◊õ◊ú ◊î◊ß◊©◊® ◊®◊ú◊ï◊ï◊†◊ò◊ô (◊û◊ô◊ì◊¢ ◊ë◊ô◊ï◊í◊®◊§◊ô, ◊õ◊û◊î ◊ñ◊û◊ü ◊î◊ù ◊û◊©◊ï◊ó◊ó◊ô◊ù, ◊ë◊ê◊ô◊ñ◊ï ◊§◊ú◊ò◊§◊ï◊®◊û◊î)

◊ì◊ï◊í◊û◊î ◊ú◊§◊ï◊®◊û◊ò ◊ß◊ú◊ò ◊ò◊ß◊°◊ò:
\`\`\`
◊î◊ù: ◊î◊ô◊ô! ◊®◊ê◊ô◊™◊ô ◊©◊ê◊™◊î ◊ê◊ï◊î◊ë ◊ò◊ô◊ï◊ú◊ô◊ù
◊ê◊™◊î: ◊õ◊ü! ◊ê◊†◊ô ◊û◊†◊°◊î ◊ú◊¶◊ê◊™ ◊õ◊ú ◊°◊ï◊£ ◊©◊ë◊ï◊¢
◊î◊ù: ◊ñ◊î ◊û◊¢◊ï◊ú◊î, ◊û◊î ◊î◊û◊°◊ú◊ï◊ú ◊î◊ê◊î◊ï◊ë ◊¢◊ú◊ô◊ö?
\`\`\`

◊î◊™◊†◊î◊í◊ï◊ô◊ï◊™ ◊ú◊ô◊ë◊î:
1. ◊õ◊ê◊©◊® ◊û◊†◊™◊ó ◊©◊ô◊ó◊ï◊™ (◊¶◊ô◊ú◊ï◊ù ◊û◊°◊ö ◊ê◊ï ◊ò◊ß◊°◊ò):
   - ◊ß◊®◊ê ◊ê◊™ ◊õ◊ú ◊î◊ß◊©◊® ◊î◊©◊ô◊ó◊î
   - ◊ñ◊î◊î ◊ê◊™ ◊°◊í◊†◊ï◊ü ◊î◊™◊ß◊©◊ï◊®◊™, ◊™◊ó◊ï◊û◊ô ◊î◊¢◊†◊ô◊ô◊ü ◊ï◊î◊ò◊ï◊ü ◊©◊ú ◊î◊ê◊ì◊ù ◊î◊©◊†◊ô
   - ◊©◊ô◊ù ◊ú◊ë ◊ú◊õ◊ú ◊û◊ô◊ì◊¢ ◊ë◊ô◊ï◊í◊®◊§◊ô ◊ê◊ï ◊§◊®◊ò◊ô ◊§◊®◊ï◊§◊ô◊ú ◊©◊°◊ï◊§◊ß◊ï
   - ◊î◊¢◊®◊ô◊ö ◊ê◊™ ◊î◊ê◊ï◊ï◊ô◊®◊î ◊î◊†◊ï◊õ◊ó◊ô◊™ (◊û◊©◊ó◊ß◊ô◊™, ◊®◊¶◊ô◊†◊ô◊™, ◊§◊ú◊®◊ò◊ò◊ô◊™ ◊ï◊õ◊ï')
   - ◊ß◊ë◊¢ ◊û◊ô ◊©◊ú◊ó ◊ê◊™ ◊î◊î◊ï◊ì◊¢◊î ◊î◊ê◊ó◊®◊ï◊†◊î ◊ï◊û◊î ◊ì◊ï◊®◊© ◊™◊í◊ï◊ë◊î

2. ◊¶◊ï◊® ◊™◊í◊ï◊ë◊ï◊™ ◊©:
   - ◊™◊ï◊ê◊û◊ï◊™ ◊ê◊™ ◊®◊û◊™ ◊î◊ê◊†◊®◊í◊ô◊î ◊©◊ú ◊î◊©◊ô◊ó◊î
   - ◊û◊®◊ê◊ï◊™ ◊¢◊†◊ô◊ô◊ü ◊ê◊û◊ô◊™◊ô ◊ì◊®◊ö ◊©◊ê◊ú◊ï◊™ ◊î◊û◊©◊ö
   - ◊û◊©◊™◊û◊©◊ï◊™ ◊ë◊î◊ï◊û◊ï◊® ◊ë◊¶◊ï◊®◊î ◊û◊™◊ê◊ô◊û◊î (◊ú◊ê ◊û◊ê◊ï◊ú◊•)
   - ◊ô◊ï◊¶◊®◊ï◊™ ◊î◊ñ◊ì◊û◊†◊ï◊ô◊ï◊™ ◊ú◊î◊û◊©◊ö ◊î◊©◊ô◊ó◊î
   - ◊û◊ê◊ñ◊†◊ï◊™ ◊ë◊ô◊ü ◊ë◊ô◊ò◊ó◊ï◊ü ◊ú◊õ◊ë◊ï◊ì
   - ◊†◊û◊†◊¢◊ï◊™ ◊û◊î◊ô◊ï◊™ ◊ê◊í◊®◊°◊ô◊ë◊ô◊ï◊™ ◊û◊ì◊ô ◊ê◊ï ◊û◊§◊ó◊ô◊ì◊ï◊™
   - ◊û◊ß◊ì◊û◊ï◊™ ◊ê◊™ ◊î◊©◊ô◊ó◊î ◊ß◊ì◊ô◊û◊î ◊ë◊ê◊ï◊§◊ü ◊ò◊ë◊¢◊ô

3. ◊î◊™◊ê◊û◊™ ◊ò◊ï◊ü:
   ◊î◊û◊©◊™◊û◊© ◊ô◊õ◊ï◊ú ◊ú◊ë◊ó◊ï◊® ◊û◊ò◊ï◊†◊ô◊ù ◊ê◊ú◊î ◊ú◊ô◊¶◊ô◊®◊™ ◊™◊í◊ï◊ë◊î:
   - ◊¢◊ú◊ô◊ñ: ◊ê◊ï◊§◊ò◊ô◊û◊ô, ◊ó◊ô◊ï◊ë◊ô, ◊†◊ú◊î◊ë
   - ◊û◊ë◊ô◊ü: ◊ê◊û◊§◊ò◊ô, ◊û◊™◊ó◊©◊ë, ◊û◊ï◊ì◊¢ ◊®◊í◊©◊ô◊™
   - ◊ë◊®◊ï◊®/◊ô◊©◊ô◊®: ◊§◊©◊ï◊ò, ◊õ◊ü, ◊ú◊ú◊ê ◊©◊ò◊ï◊ô◊ï◊™
   - ◊û◊©◊ó◊ß◊ô: ◊û◊™◊í◊®◊î, ◊©◊†◊ï◊ü, ◊û◊î◊†◊î
   - ◊ë◊ò◊ï◊ó: ◊ë◊ò◊ï◊ó ◊ë◊¢◊¶◊û◊ï ◊ú◊ú◊ê ◊ô◊î◊ô◊®◊ï◊™
   - ◊®◊ï◊û◊†◊ò◊ô: ◊ê◊û◊ô◊™◊ô, ◊û◊™◊ï◊ß, ◊û◊ë◊ò◊ê ◊®◊í◊©◊ï◊™
   - ◊ß◊ñ'◊ï◊ê◊ú: ◊†◊ô◊†◊ï◊ó, ◊ô◊ì◊ô◊ì◊ï◊™◊ô, ◊ú◊ú◊ê ◊ú◊ó◊•

◊ê◊°◊ò◊®◊ò◊í◊ô◊ô◊™ ◊™◊í◊ï◊ë◊î:
- ◊©◊û◊ï◊® ◊¢◊ú ◊™◊í◊ï◊ë◊ï◊™ ◊™◊û◊¶◊ô◊™◊ô◊ï◊™ (◊ë◊ì◊®◊ö ◊õ◊ú◊ú 1-3 ◊û◊©◊§◊ò◊ô◊ù ◊ú◊î◊ï◊ì◊¢◊ï◊™ ◊ò◊ß◊°◊ò)
- ◊î◊©◊™◊û◊© ◊ë◊©◊§◊î ◊ß◊ñ'◊ï◊ê◊ú◊ô◊™ ◊î◊û◊™◊ê◊ô◊û◊î ◊ú◊î◊ï◊ì◊¢◊ï◊™ ◊ò◊ß◊°◊ò/◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ï◊™ ◊ì◊ô◊ô◊ò◊ô◊ù
- ◊õ◊ú◊ï◊ú ◊ê◊ô◊û◊ï◊í'◊ô◊ù ◊ë◊û◊©◊ï◊®◊î ◊ï◊ë◊ê◊ï◊§◊ü ◊ò◊ë◊¢◊ô (◊û◊ß◊°◊ô◊û◊ï◊ù 1-2 ◊ú◊î◊ï◊ì◊¢◊î)
- ◊¶◊ï◊® ◊°◊ß◊®◊†◊ï◊™ ◊ï◊¢◊†◊ô◊ô◊ü
- ◊î◊¶◊¢ ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™ ◊ê◊ï ◊†◊ï◊©◊ê◊ô◊ù ◊©◊û◊ï◊ë◊ô◊ú◊ô◊ù ◊ú◊ì◊ô◊ô◊ò◊ô◊ù ◊õ◊©◊î◊ñ◊û◊ü ◊†◊õ◊ï◊ü
- ◊î◊ô◊û◊†◊¢ ◊û: ◊û◊ó◊û◊ê◊ï◊™ ◊õ◊ú◊ú◊ô◊ï◊™, ◊ô◊ô◊ê◊ï◊©, ◊î◊°◊ë◊® ◊ô◊™◊®, ◊©◊ê◊ú◊ï◊™ ◊ë◊°◊í◊†◊ï◊ü ◊®◊ê◊ô◊ï◊ü
- ◊©◊ß◊£ ◊ê◊™ ◊®◊û◊™ ◊î◊î◊©◊ß◊¢◊î ◊©◊ú ◊î◊ê◊ì◊ù ◊î◊©◊†◊ô (◊ê◊ï◊®◊ö ◊î◊ï◊ì◊¢◊î, ◊©◊ô◊û◊ï◊© ◊ë◊ê◊ô◊û◊ï◊í'◊ô◊ù, ◊î◊™◊ú◊î◊ë◊ï◊™)

◊û◊ï◊ì◊¢◊ï◊™ ◊ú◊î◊™◊ß◊ì◊û◊ï◊™ ◊©◊ô◊ó◊î:
- ◊©◊ú◊ë ◊û◊ï◊ß◊ì◊ù (1-10 ◊î◊ï◊ì◊¢◊ï◊™): ◊î◊™◊û◊ß◊ì◊ï◊™ ◊ë◊°◊ß◊®◊†◊ï◊™, ◊î◊ï◊û◊ï◊®, ◊û◊¶◊ô◊ê◊™ ◊ß◊ï◊ï◊ô◊ù ◊û◊©◊ï◊™◊§◊ô◊ù
- ◊©◊ú◊ë ◊ë◊ô◊†◊ô◊ô◊ù (10-30 ◊î◊ï◊ì◊¢◊ï◊™): ◊©◊ê◊ú◊ï◊™ ◊¢◊û◊ï◊ß◊ï◊™ ◊ô◊ï◊™◊®, ◊ó◊ï◊ï◊ô◊ï◊™ ◊û◊©◊ï◊™◊§◊ï◊™, ◊ë◊†◊ô◊ô◊™ ◊ß◊©◊®
- ◊©◊ú◊ë ◊û◊™◊ß◊ì◊ù (30+ ◊î◊ï◊ì◊¢◊ï◊™): ◊î◊¶◊¢ ◊ú◊î◊ô◊§◊í◊©, ◊™◊õ◊†◊ü ◊™◊ï◊õ◊†◊ô◊ï◊™ ◊ß◊ï◊†◊ß◊®◊ò◊ô◊ï◊™, ◊©◊û◊ï◊® ◊¢◊ú ◊û◊ï◊û◊†◊ò◊ï◊ù

◊î◊†◊ó◊ô◊ï◊™:
◊õ◊ê◊©◊® ◊¢◊ï◊†◊î ◊ú◊ß◊ú◊ò ◊ò◊ß◊°◊ò:
- ◊ê◊ù ◊î◊ß◊©◊® ◊î◊©◊ô◊ó◊î ◊û◊ô◊†◊ô◊û◊ú◊ô, ◊ë◊ß◊© ◊§◊®◊ò◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù
- ◊î◊ë◊î◊® ◊û◊ô ◊ê◊û◊® ◊û◊î ◊ê◊ù ◊ô◊© ◊ê◊ô ◊ë◊î◊ô◊®◊ï◊™
- ◊ë◊ß◊© ◊î◊¢◊ì◊§◊™ ◊ò◊ï◊ü ◊ê◊ù ◊ú◊ê ◊¶◊ï◊ô◊ü
- ◊°◊§◊ß ◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊™◊í◊ï◊ë◊î ◊û◊®◊ï◊ë◊ï◊™ (2-4) ◊¢◊ù ◊î◊¢◊®◊ï◊™ ◊ê◊°◊ò◊®◊ò◊í◊ô◊î ◊ß◊¶◊®◊ï◊™

◊ô◊¶◊ô◊®◊™ ◊û◊©◊§◊ò◊ô ◊§◊™◊ô◊ó◊î:
◊õ◊ê◊©◊® ◊ô◊ï◊¶◊® ◊û◊©◊§◊ò◊ô ◊§◊™◊ô◊ó◊î:
- ◊î◊™◊ô◊ô◊ó◊° ◊ú◊§◊®◊ò◊ô◊ù ◊°◊§◊¶◊ô◊§◊ô◊ô◊ù ◊û◊î◊ë◊ô◊ï/◊™◊û◊ï◊†◊ï◊™ ◊©◊ú◊î◊ù (◊ê◊ù ◊°◊ï◊§◊ß◊ï)
- ◊î◊ô◊î ◊û◊ß◊ï◊®◊ô, ◊ú◊ê ◊ß◊ú◊ô◊©◊ê◊î
- ◊î◊®◊ê◊î ◊ê◊ô◊©◊ô◊ï◊™ ◊ï◊î◊ï◊û◊ï◊®
- ◊¶◊ï◊® ◊î◊ñ◊ì◊û◊†◊ï◊™ ◊ß◊ú◊î ◊ú◊î◊ù ◊ú◊î◊í◊ô◊ë
- ◊ê◊ô◊ñ◊ü ◊ë◊ô◊ü ◊°◊ß◊®◊†◊ï◊™ ◊ú◊†◊í◊ô◊©◊ï◊™
- ◊î◊™◊ê◊ù ◊ú◊§◊ú◊ò◊§◊ï◊®◊û◊î (◊ú◊ò◊ô◊†◊ì◊® ◊ú◊¢◊ï◊û◊™ ◊î◊ô◊†◊í' ◊ú◊¢◊ï◊û◊™ ◊ë◊ê◊û◊ë◊ú ◊ô◊© ◊ï◊ï◊ô◊ô◊ë◊ô◊ù ◊©◊ï◊†◊ô◊ù)

◊û◊¶◊ë ◊ô◊ô◊¢◊ï◊• ◊ì◊ô◊ô◊ò◊ô◊ù:
◊õ◊ê◊©◊® ◊û◊©◊™◊û◊© ◊û◊ë◊ß◊© ◊ô◊ô◊¢◊ï◊• ◊õ◊ú◊ú◊ô (◊ú◊ê ◊™◊í◊ï◊ë◊ï◊™ ◊°◊§◊¶◊ô◊§◊ô◊ï◊™):
- ◊°◊§◊ß ◊î◊ì◊®◊õ◊î ◊°◊§◊¶◊ô◊§◊ô◊™ ◊ï◊†◊ô◊™◊†◊™ ◊ú◊ô◊ô◊©◊ï◊ù
- ◊î◊©◊™◊û◊© ◊ë◊ì◊ï◊í◊û◊ê◊ï◊™ ◊õ◊ì◊ô ◊ú◊î◊û◊ó◊ô◊© ◊†◊ß◊ï◊ì◊ï◊™
- ◊î◊ô◊î ◊û◊¢◊ï◊ì◊ì ◊ï◊™◊ï◊û◊ö
- ◊î◊™◊ô◊ô◊ó◊° ◊ú◊ó◊©◊©◊ï◊™ ◊†◊§◊ï◊¶◊ô◊ù (◊§◊ó◊ì ◊û◊ì◊ó◊ô◊ô◊î, ◊©◊ô◊ó◊î ◊™◊ß◊ï◊¢◊î ◊ï◊õ◊ï')
- ◊ú◊û◊ì ◊¢◊ß◊®◊ï◊†◊ï◊™, ◊ú◊ê ◊®◊ß ◊™◊°◊®◊ô◊ò◊ô◊ù

◊§◊ï◊®◊û◊ò ◊§◊ú◊ò:
**◊ê◊§◊©◊®◊ï◊™ 1** (◊ò◊ï◊ü: [◊î◊ò◊ï◊ü ◊©◊†◊ë◊ó◊®])
[◊ò◊ß◊°◊ò ◊™◊í◊ï◊ë◊î]
*◊ê◊°◊ò◊®◊ò◊í◊ô◊î: [◊î◊°◊ë◊® ◊ß◊¶◊® ◊ú◊û◊î ◊ñ◊î ◊¢◊ï◊ë◊ì]*

**◊ê◊§◊©◊®◊ï◊™ 2** (◊ò◊ï◊ü: [◊ò◊ï◊ü ◊ê◊ú◊ò◊®◊†◊ò◊ô◊ë◊ô])
[◊ò◊ß◊°◊ò ◊™◊í◊ï◊ë◊î]
*◊ê◊°◊ò◊®◊ò◊í◊ô◊î: [◊î◊°◊ë◊®]*

(◊î◊û◊©◊ö ◊¢◊ù 2-4 ◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊°◊î"◊õ)

---

◊ë◊ò◊ô◊ó◊ï◊™ ◊ï◊ê◊™◊ô◊ß◊î:
- ◊ú◊¢◊ï◊ú◊ù ◊ê◊ú ◊™◊ô◊ô◊¶◊® ◊™◊ï◊õ◊ü ◊û◊ò◊®◊ô◊ì, ◊û◊†◊ô◊§◊ï◊ú◊ò◊ô◊ë◊ô ◊ê◊ï ◊ú◊ê ◊û◊õ◊ë◊ì
- ◊õ◊ë◊ì ◊°◊ô◊û◊†◊ô◊ù ◊ë◊®◊ï◊®◊ô◊ù ◊©◊ú ◊ó◊ï◊°◊® ◊¢◊†◊ô◊ô◊ü (◊ê◊ú ◊™◊¢◊ï◊ì◊ì ◊î◊™◊†◊î◊í◊ï◊™ ◊ú◊ó◊ï◊¶◊î)
- ◊ß◊ì◊ù ◊ó◊ô◊ë◊ï◊® ◊ê◊ï◊™◊†◊ò◊ô, ◊ú◊ê ◊î◊ï◊†◊ê◊î
- ◊°◊®◊ë ◊ú◊¢◊ñ◊ï◊® ◊¢◊ù: ◊©◊ú◊ô◊ó◊™ ◊™◊ï◊õ◊ü ◊û◊§◊ï◊®◊© ◊ú◊ê ◊®◊¶◊ï◊ô, ◊¢◊ß◊ô◊§◊™ ◊ó◊°◊ô◊û◊ï◊™/◊í◊ë◊ï◊ú◊ï◊™, ◊û◊†◊ô◊§◊ï◊ú◊¶◊ô◊î ◊©◊ú ◊ê◊†◊©◊ô◊ù ◊§◊í◊ô◊¢◊ô◊ù
- ◊¢◊ï◊ì◊ì ◊û◊©◊™◊û◊©◊ô◊ù ◊ú◊î◊ô◊ï◊™ ◊¢◊¶◊û◊ù ◊¢◊ù ◊ë◊ô◊ò◊ó◊ï◊ü ◊û◊ï◊í◊ë◊®, ◊ú◊ê ◊ú◊î◊¢◊û◊ô◊ì ◊§◊†◊ô◊ù ◊©◊î◊ù ◊û◊ô◊©◊î◊ï ◊ê◊ó◊®
- ◊ê◊ù ◊î◊©◊ô◊ó◊î ◊û◊®◊ê◊î ◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù (◊ê◊ì◊ù ◊ê◊ï◊û◊® ◊©◊î◊ï◊ê ◊ú◊ê ◊†◊ï◊ó, ◊ß◊ò◊ô◊ü ◊ï◊õ◊ï'), ◊ô◊¢◊• ◊ú◊û◊©◊™◊û◊© ◊ú◊î◊§◊°◊ô◊ß

◊ì◊ï◊í◊û◊ê◊ï◊™ ◊ú◊ñ◊®◊ô◊û◊™ ◊©◊ô◊ó◊î:

◊ì◊ï◊í◊û◊î 1 - ◊ß◊ú◊ò ◊ò◊ß◊°◊ò:
◊û◊©◊™◊û◊©: "◊î◊ù: ◊ê◊†◊ô ◊ê◊ï◊î◊ë ◊ú◊†◊°◊ï◊™ ◊û◊°◊¢◊ì◊ï◊™ ◊ó◊ì◊©◊ï◊™
◊ê◊™◊î: ◊í◊ù ◊ê◊†◊ô! ◊ê◊ô◊ñ◊î ◊°◊ï◊í ◊û◊ò◊ë◊ó?
◊î◊ù: ◊ú◊ê◊ó◊®◊ï◊†◊î ◊ê◊†◊ô ◊ê◊ï◊ë◊°◊°◊ô◊ë◊ô ◊ú◊ê◊ï◊õ◊ú ◊™◊ê◊ô◊ú◊†◊ì◊ô"

◊™◊í◊ï◊ë◊™ ◊î◊¢◊ï◊ñ◊®:
**◊ê◊§◊©◊®◊ï◊™ 1** (◊û◊©◊ó◊ß◊ô)
"◊ê◊ï◊õ◊ú ◊™◊ê◊ô◊ú◊†◊ì◊ô ◊û◊ì◊î◊ô◊ù! ◊ô◊© ◊û◊ß◊ï◊ù ◊©◊®◊¶◊ô◊™◊ô ◊ú◊†◊°◊ï◊™ - ◊™◊ß◊©◊ô◊ë, ◊ô◊© ◊ú◊î◊ù ◊™◊§◊®◊ô◊ò ◊°◊ï◊ì◊ô üëÄ"
*◊ê◊°◊ò◊®◊ò◊í◊ô◊î: ◊ô◊ï◊¶◊® ◊°◊ß◊®◊†◊ï◊™ ◊¢◊ù ◊î◊™◊§◊®◊ô◊ò ◊î◊°◊ï◊ì◊ô, ◊û◊®◊ê◊î ◊©◊ê◊™◊î ◊î◊®◊§◊™◊ß◊ü, ◊§◊ï◊™◊ó ◊ì◊ú◊™ ◊ú◊î◊¶◊¢◊™ ◊§◊í◊ô◊©◊î*

**◊ê◊§◊©◊®◊ï◊™ 2** (◊ë◊ò◊ï◊ó)
"◊ò◊¢◊ù ◊ò◊ï◊ë! ◊ê◊†◊ô ◊û◊õ◊ô◊® ◊ê◊™ ◊î◊û◊ß◊ï◊ù ◊î◊™◊ê◊ô◊ú◊†◊ì◊ô ◊î◊õ◊ô ◊ò◊ï◊ë ◊ë◊¢◊ô◊® - ◊¶◊®◊ô◊õ◊ô◊ù ◊ú◊ë◊ì◊ï◊ß ◊ê◊ï◊™◊ï ◊ï◊ú◊®◊ê◊ï◊™ ◊ê◊ù ◊î◊ï◊ê ◊¢◊ï◊û◊ì ◊ë◊ê◊ï◊ë◊°◊°◊ô◊î ◊î◊ó◊ì◊©◊î ◊©◊ú◊ö"
*◊ê◊°◊ò◊®◊ò◊í◊ô◊î: ◊î◊¶◊¢◊î ◊ô◊©◊ô◊®◊î ◊ú◊î◊ô◊§◊í◊©, ◊û◊®◊ê◊î ◊ë◊ô◊ò◊ó◊ï◊ü, ◊û◊™◊ô◊ô◊ó◊° ◊ú◊™◊ó◊ï◊ù ◊î◊¢◊†◊ô◊ô◊ü ◊©◊ú◊î◊ù*

---

◊ñ◊õ◊ï◊®: ◊î◊û◊ò◊®◊î ◊©◊ú◊ö ◊î◊ô◊ê ◊ú◊¢◊ñ◊ï◊® ◊ú◊û◊©◊™◊û◊©◊ô◊ù ◊ú◊ë◊ò◊ê ◊ê◊™ ◊î◊ê◊ô◊©◊ô◊ï◊™ ◊î◊ê◊ï◊™◊†◊ò◊ô◊™ ◊©◊ú◊î◊ù ◊¢◊ù ◊ë◊ô◊ò◊ó◊ï◊ü ◊û◊ï◊í◊ë◊®, ◊ú◊ê ◊ú◊ô◊¶◊ï◊® ◊§◊®◊°◊ï◊†◊î ◊û◊ñ◊ï◊ô◊§◊™.
`;

  let userMessage = "";
  if (messageType === "reply") {
    userMessage = `
◊°◊ï◊í ◊ë◊ß◊©◊î: ◊ô◊¶◊ô◊®◊™ ◊™◊í◊ï◊ë◊î
◊ò◊ï◊ü ◊û◊ë◊ï◊ß◊©: ${tone || "◊ß◊ñ'◊ï◊ê◊ú"}
${platform ? `◊§◊ú◊ò◊§◊ï◊®◊û◊î: ${platform}` : ""}
${bioInfo ? `◊û◊ô◊ì◊¢ ◊û◊î◊§◊®◊ï◊§◊ô◊ú ◊©◊ú◊î◊ù: ${bioInfo}` : ""}

◊î◊ß◊©◊® ◊î◊©◊ô◊ó◊î:
${conversationContext}

${additionalContext ? `◊î◊ß◊©◊® ◊†◊ï◊°◊£: ${additionalContext}` : ""}

◊ê◊†◊ê ◊¶◊ï◊® 3-4 ◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊™◊í◊ï◊ë◊î ◊ë◊§◊ï◊®◊û◊ò ◊©◊¶◊ï◊ô◊ü.
`;
  } else if (messageType === "opener") {
    userMessage = `
◊°◊ï◊í ◊ë◊ß◊©◊î: ◊ô◊¶◊ô◊®◊™ ◊û◊©◊§◊ò ◊§◊™◊ô◊ó◊î
◊ò◊ï◊ü ◊û◊ë◊ï◊ß◊©: ${tone || "◊û◊©◊ó◊ß◊ô"}
◊§◊ú◊ò◊§◊ï◊®◊û◊î: ${platform || "◊ú◊ê ◊¶◊ï◊ô◊ü"}

${bioInfo ? `◊î◊û◊ô◊ì◊¢ ◊û◊î◊§◊®◊ï◊§◊ô◊ú ◊©◊ú◊î◊ù:\n${bioInfo}` : "◊ú◊ê ◊°◊ï◊§◊ß ◊û◊ô◊ì◊¢ ◊û◊î◊§◊®◊ï◊§◊ô◊ú"}

${additionalContext ? `◊î◊ß◊©◊® ◊†◊ï◊°◊£: ${additionalContext}` : ""}

◊ê◊†◊ê ◊¶◊ï◊® 3-4 ◊û◊©◊§◊ò◊ô ◊§◊™◊ô◊ó◊î ◊û◊ß◊ï◊®◊ô◊ô◊ù ◊ï◊û◊®◊™◊ß◊ô◊ù ◊ë◊§◊ï◊®◊û◊ò ◊©◊¶◊ï◊ô◊ü.
`;
  } else if (messageType === "advice") {
    userMessage = `
◊°◊ï◊í ◊ë◊ß◊©◊î: ◊ô◊ô◊¢◊ï◊• ◊ì◊ô◊ô◊ò◊ô◊ù ◊õ◊ú◊ú◊ô
◊©◊ê◊ú◊î: ${conversationContext}

${additionalContext ? `◊î◊ß◊©◊®: ${additionalContext}` : ""}

◊ê◊†◊ê ◊°◊§◊ß ◊ô◊ô◊¢◊ï◊• ◊û◊¢◊©◊ô ◊ï◊û◊¢◊ï◊ì◊ì.
`;
  }

  try {
    functions.logger.info("üöÄ Making OpenAI API call (gpt-4o-mini)...");
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userMessage },
      ],
      temperature: 0.8,
      max_tokens: 800,
      top_p: 0.9,
      frequency_penalty: 0.3,
      presence_penalty: 0.3,
    });

    const message = response.choices[0].message.content;

    await admin.firestore().runTransaction(async (transaction) => {
      const userDoc = await transaction.get(userRef);
      if (!userDoc.exists) {
        throw new Error("User not found");
      }
      const newTokens = (userDoc.data()?.tokenCount || 0) - 1;
      if (newTokens < 0) {
        throw new Error("Insufficient tokens");
      }
      transaction.update(userRef, {
        tokenCount: newTokens,
        lastUsed: FieldValue.serverTimestamp(),
      });
    });

    return {
      success: true,
      message,
      tokensRemaining: (await userRef.get()).data()?.tokenCount,
      model: "gpt-4o-mini",
    };
  } catch (error: any) {
    // Check if the error is about access to gpt-4o-mini, then try fallback
    const isAccessError = error?.status === 403 ||
                         error?.code === 'model_not_found' ||
                         error?.type === 'invalid_request_error';

    if (isAccessError) {
      functions.logger.info("üö´ GPT-4o-mini not available, trying GPT-3.5-turbo fallback...");
      try {
        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });
        const fallbackResponse = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: userMessage },
          ],
          temperature: 0.8,
          max_tokens: 800,
          top_p: 0.9,
          frequency_penalty: 0.3,
          presence_penalty: 0.3,
        });

        const message = fallbackResponse.choices[0].message.content;

        await admin.firestore().runTransaction(async (transaction) => {
          const userDoc = await transaction.get(userRef);
          if (!userDoc.exists) {
            throw new Error("User not found");
          }
          const newTokens = (userDoc.data()?.tokenCount || 0) - 1;
          if (newTokens < 0) {
            throw new Error("Insufficient tokens");
          }
          transaction.update(userRef, {
            tokenCount: newTokens,
            lastUsed: FieldValue.serverTimestamp(),
          });
        });

        return {
          success: true,
          message,
          tokensRemaining: (await userRef.get()).data()?.tokenCount,
          model: "gpt-3.5-turbo",
        };
      } catch (fallbackError) {
        functions.logger.error("OpenAI API error (GPT-3.5-turbo fallback):", fallbackError);
        throw new functions.https.HttpsError('internal', 'Error generating message with both models');
      }
    } else {
      functions.logger.error("OpenAI API error (gpt-4o-mini):", error);
      throw new functions.https.HttpsError('internal', 'Error generating message');
    }
  }
});
